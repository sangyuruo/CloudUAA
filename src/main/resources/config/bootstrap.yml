# ===================================================================
# Spring Cloud Config bootstrap configuration for the "dev" profile
# In prod profile, properties will be overwriten by the ones defined in bootstrap-prod.yml
# ===================================================================

jhipster:
    registry:
        password: admin

spring:
    application:
        name: EmCloudUAA
    profiles:
        # The commented value for `active` can be replaced with valid Spring profiles to load.
        # Otherwise, it will be filled in by maven when building the WAR file
        # Either way, it can be overridden by `--spring.profiles.active` value passed in the commandline or `-Dspring.profiles.active` set in `JAVA_OPTS`
        active: #spring.profiles.active#
    cloud:
        config:
            fail-fast: false # if not in "prod" profile, do not force to use Spring Cloud Config
            uri: http://admin:${jhipster.registry.password}@config.emcloud.dev.com:8761/config
            # name of the config server's property source (file.yml) that we want to use
            name: EmCloudUAA
            profile: dev # profile(s) of the property source
            label: zoomlion # toggle to switch to a different version of the configuration as stored in git
            # it can be set to any label, branch or commit of the configuration source Git repository
        stream:
            kafka:
                binder:
                    brokers: 10.39.52.72:9092,10.39.52.73:9092,10.39.52.74:9092
                    zk-nodes: 10.39.52.72:2181,10.39.52.73:2181,10.39.52.74:2181
                    healthTimeout: 60
            bindings:
                input1:
                    destination: output_batch_msg
                    group: group1
                    ## 测试消费端指定分区
                    consumer:
                        partitioned: true
                        instanceIndex: 0
                        instanceCount: 5
                input2:
                    destination: output_batch_msg
                    group: group1
                    consumer:
                        partitioned: true
                        instanceIndex: 1
                        instanceCount: 5
                input3:
                    destination: output_batch_msg
                    group: group1
                    consumer:
                        partitioned: true
                        instanceIndex: 2
                        instanceCount: 5
                input4:
                    destination: output_batch_msg
                    group: group1
                    consumer:
                        partitioned: true
                        instanceIndex: 3
                        instanceCount: 5
                input5:
                    destination: output_batch_msg
                    group: group1
                    consumer:
                        partitioned: true
                        instanceIndex: 4
                        instanceCount: 5
#                input2:
#                    destination: output_batch_msg
#                    group: group2
                output:
                    destination: output_batch_msg
                    ## 测试消息生产端的分区key
                    producer:
                        partitioned: true
#                        partitionKeyExtractorClass: org.springframework.cloud.stream.partitioning.CustomPartitionKeyExtractorClass
                        partitionKeyExtractorClass: com.emcloud.uaa.messaging.partition.CustomPartitionKeyExtractorClass
#                        partitionSelectorClass: org.springframework.cloud.stream.partitioning.CustomPartitionSelectorClass
                        partitionSelectorClass: com.emcloud.uaa.messaging.partition.CustomPartitionSelectorClass
                        partitionCount: 5
        bus:
            trace:
                enabled: true
            refresh:
                enabled: true
